##Parth Rangarajan
##A-14 | 201900186 |


import numpy as np
np.random.seed(seed=0)
I = np.random.choice([0,1], 3)# generate random vector I, sampling from {0,1}
W = np.random.choice([-1,1], 3) # generate random vector W, sampling from {-1,1} 
print(f'Input vector:{I}, Weight vector:{W}')

dot = I @ W
print(f'Dot product: {dot}')

def linear_threshold_gate(dot: int, T: float) -> int:
    if dot >= T:
        return 1
    else:
        return 0

T = 1
activation = linear_threshold_gate(dot, T)
print(f'Activation: {activation}')

T = 3
activation = linear_threshold_gate(dot, T)
print(f'Activation: {activation}')

# Now boolean algebra
basic_table = np.array([
    [0,0], 
    [0,1], 
    [1,0], 
    [1,1] 
])

print(f'basic table:\n{basic_table}')

weights = np.array([1,1])
print(f'weights: {weights}')

dot_products = basic_table @ weights
print(f'Dot products: {dot_products}')

T = 2
for i in range(0,4):
    activation = linear_threshold_gate(dot_products[i], T)
    print(f'Activation: {activation}')